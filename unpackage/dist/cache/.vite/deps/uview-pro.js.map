{
  "version": 3,
  "sources": ["../../../../../node_modules/uview-pro/libs/function/queryParams.ts", "../../../../../node_modules/uview-pro/libs/function/route.ts", "../../../../../node_modules/uview-pro/libs/function/timeFormat.ts", "../../../../../node_modules/uview-pro/libs/function/timeFrom.ts", "../../../../../node_modules/uview-pro/libs/function/colorGradient.ts", "../../../../../node_modules/uview-pro/libs/function/guid.ts", "../../../../../node_modules/uview-pro/libs/function/color.ts", "../../../../../node_modules/uview-pro/libs/function/type2icon.ts", "../../../../../node_modules/uview-pro/libs/function/randomArray.ts", "../../../../../node_modules/uview-pro/libs/function/deepClone.ts", "../../../../../node_modules/uview-pro/libs/function/deepMerge.ts", "../../../../../node_modules/uview-pro/libs/function/test.ts", "../../../../../node_modules/uview-pro/libs/function/addUnit.ts", "../../../../../node_modules/uview-pro/libs/function/random.ts", "../../../../../node_modules/uview-pro/libs/function/trim.ts", "../../../../../node_modules/uview-pro/libs/function/toast.ts", "../../../../../node_modules/uview-pro/libs/function/getParent.ts", "../../../../../node_modules/uview-pro/libs/function/$parent.ts", "../../../../../node_modules/uview-pro/libs/function/sys.ts", "../../../../../node_modules/uview-pro/libs/function/debounce.ts", "../../../../../node_modules/uview-pro/libs/function/throttle.ts", "../../../../../node_modules/uview-pro/libs/function/getRect.ts", "../../../../../node_modules/uview-pro/libs/function/parent.ts", "../../../../../node_modules/uview-pro/package.json", "../../../../../node_modules/uview-pro/libs/config/config.ts", "../../../../../node_modules/uview-pro/libs/config/zIndex.ts", "../../../../../node_modules/uview-pro/libs/util/emitter.ts", "../../../../../node_modules/uview-pro/libs/util/mitt.ts", "../../../../../node_modules/uview-pro/libs/request/index.ts", "../../../../../node_modules/uview-pro/index.ts"],
  "sourcesContent": ["/**\n * 对象转url参数\n * @param data 对象参数\n * @param isPrefix 是否自动加上\"?\"，默认true\n * @param arrayFormat 数组参数格式，indices/brackets/repeat/comma，默认brackets\n * @returns url参数字符串\n */\nfunction queryParams(data: Record<string, any> = {}, isPrefix: boolean = true, arrayFormat: 'indices' | 'brackets' | 'repeat' | 'comma' = 'brackets'): string {\n    const prefix = isPrefix ? '?' : '';\n    const _result: string[] = [];\n    if (!['indices', 'brackets', 'repeat', 'comma'].includes(arrayFormat)) arrayFormat = 'brackets';\n    for (const key in data) {\n        const value = data[key];\n        // 去掉为空的参数\n        if (['', undefined, null].includes(value)) {\n            continue;\n        }\n        // 如果值为数组，另行处理\n        if (Array.isArray(value)) {\n            // e.g. {ids: [1, 2, 3]}\n            switch (arrayFormat) {\n                case 'indices':\n                    // 结果: ids[0]=1&ids[1]=2&ids[2]=3\n                    for (let i = 0; i < value.length; i++) {\n                        _result.push(`${key}[${i}]=${value[i]}`);\n                    }\n                    break;\n                case 'brackets':\n                    // 结果: ids[]=1&ids[]=2&ids[]=3\n                    value.forEach((_value: any) => {\n                        _result.push(`${key}[]=${_value}`);\n                    });\n                    break;\n                case 'repeat':\n                    // 结果: ids=1&ids=2&ids=3\n                    value.forEach((_value: any) => {\n                        _result.push(`${key}=${_value}`);\n                    });\n                    break;\n                case 'comma':\n                    // 结果: ids=1,2,3\n                    let commaStr = '';\n                    value.forEach((_value: any) => {\n                        commaStr += (commaStr ? ',' : '') + _value;\n                    });\n                    _result.push(`${key}=${commaStr}`);\n                    break;\n                default:\n                    value.forEach((_value: any) => {\n                        _result.push(`${key}[]=${_value}`);\n                    });\n            }\n        } else {\n            _result.push(`${key}=${value}`);\n        }\n    }\n    return _result.length ? prefix + _result.join('&') : '';\n}\n\nexport default queryParams;\n", "/**\n * 路由跳转方法，该方法相对于直接使用uni.xxx的好处是使用更加简单快捷\n * 并且带有路由拦截功能\n */\n\ninterface RouterConfig {\n    type?: string;\n    url?: string;\n    delta?: number;\n    params?: Record<string, any>;\n    animationType?: string;\n    animationDuration?: number;\n    intercept?: boolean;\n}\n\ndeclare const uni: any; // 声明uni对象，避免ts报错\n\nclass Router {\n    config: RouterConfig;\n    // route: (options?: string | RouterConfig, params?: Record<string, any>) => Promise<void>;\n\n    constructor() {\n        // 原始属性定义\n        this.config = {\n            type: 'navigateTo',\n            url: '',\n            delta: 1, // navigateBack页面后退时,回退的层数\n            params: {}, // 传递的参数\n            animationType: 'pop-in', // 窗口动画,只在APP有效\n            animationDuration: 300, // 窗口动画持续时间,单位毫秒,只在APP有效\n            intercept: false // 是否需要拦截\n        };\n        // 因为route方法是需要对外赋值给另外的对象使用，同时route内部有使用this，会导致route失去上下文\n        // 这里在构造函数中进行this绑定\n        this.route = this.route.bind(this);\n    }\n\n    // 判断url前面是否有\"/\"，如果没有则加上，否则无法跳转\n    addRootPath(url: string): string {\n        return url[0] === '/' ? url : `/${url}`;\n    }\n\n    // 整合路由参数\n    mixinParam(url: string, params: Record<string, any>): string {\n        url = url && this.addRootPath(url);\n        // 使用正则匹配，主要依据是判断是否有\"/\",\"?\",\"=\"等，如“/page/index/index?name=mary\"\n        // 如果有url中有get参数，转换后无需带上\"?\"\n        let query = '';\n        if (/.*\\/.*\\?.*=.*/.test(url)) {\n            // object对象转为get类型的参数\n            query = uni.$u.queryParams(params, false);\n            // 因为已有get参数,所以后面拼接的参数需要带上\"&\"隔开\n            return url + '&' + query;\n        } else {\n            // 直接拼接参数，因为此处url中没有后面的query参数，也就没有\"?/&\"之类的符号\n            query = uni.$u.queryParams(params);\n            return url + query;\n        }\n    }\n\n    /**\n     * 路由跳转主方法\n     * @param options 跳转配置或url字符串\n     * @param params 跳转参数\n     */\n    async route(options: string | RouterConfig = {}, params: Record<string, any> = {}): Promise<void> {\n        let mergeConfig: RouterConfig = {};\n        if (typeof options === 'string') {\n            // 如果options为字符串，则为route(url, params)的形式\n            mergeConfig.url = this.mixinParam(options, params);\n            mergeConfig.type = 'navigateTo';\n        } else {\n            mergeConfig = uni.$u.deepMerge(this.config, options);\n            // 否则正常使用mergeConfig中的url和params进行拼接\n            mergeConfig.url = this.mixinParam(options.url || '', options.params || {});\n        }\n        if (params.intercept) {\n            this.config.intercept = params.intercept;\n        }\n        // params参数也带给拦截器\n        mergeConfig.params = params;\n        // 合并内外部参数\n        mergeConfig = uni.$u.deepMerge(this.config, mergeConfig);\n        // 判断用户是否定义了拦截器\n        if (uni.$u.routeIntercept && typeof uni.$u.routeIntercept === 'function') {\n            // 定一个promise，根据用户执行resolve(true)或者resolve(false)来决定是否进行路由跳转\n            const isNext = await new Promise<boolean>(resolve => {\n                uni.$u.routeIntercept(mergeConfig, resolve);\n            });\n            // 如果isNext为true，则执行路由跳转\n            isNext && this.openPage(mergeConfig);\n        } else {\n            this.openPage(mergeConfig);\n        }\n    }\n\n    // 执行路由跳转\n    openPage(config: RouterConfig): void {\n        const { url = '', type = '', delta = 1, animationDuration = 300 } = config;\n        if (type == 'navigateTo' || type == 'to') {\n            uni.navigateTo({ url, animationDuration });\n        }\n        if (type == 'redirectTo' || type == 'redirect') {\n            uni.redirectTo({ url });\n        }\n        if (type == 'switchTab' || type == 'tab') {\n            uni.switchTab({ url });\n        }\n        if (type == 'reLaunch' || type == 'launch') {\n            uni.reLaunch({ url });\n        }\n        if (type == 'navigateBack' || type == 'back') {\n            uni.navigateBack({ delta });\n        }\n    }\n}\n\nexport default new Router().route;\n", "// padStart 的 polyfill，因为某些机型或情况，还无法支持es7的padStart，比如电脑版的微信小程序\n// 所以这里做一个兼容polyfill的兼容处理\nif (!String.prototype.padStart) {\n    // 为了方便表示这里 fillString 用了ES6 的默认参数，不影响理解\n    String.prototype.padStart = function (this: string, maxLength: number, fillString: string = ' '): string {\n        if (Object.prototype.toString.call(fillString) !== '[object String]') throw new TypeError('fillString must be String');\n        let str = this;\n        if (str.length >= maxLength) return String(str);\n        let fillLength = maxLength - str.length,\n            times = Math.ceil(fillLength / fillString.length);\n        while ((times >>= 1)) {\n            fillString += fillString;\n            if (times === 1) {\n                fillString += fillString;\n            }\n        }\n        return fillString.slice(0, fillLength) + str;\n    };\n}\n\n/**\n * 时间格式化\n * @param dateTime 时间戳、Date对象或null，默认当前时间\n * @param fmt 格式化字符串，默认 'yyyy-mm-dd'\n * @returns 格式化后的时间字符串\n */\nfunction timeFormat(dateTime: number | string | Date | null = null, fmt: string = 'yyyy-mm-dd'): string {\n    // 如果为null,则格式化当前时间\n    if (!dateTime) dateTime = Number(new Date());\n    // 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\n    if (typeof dateTime === 'number' || typeof dateTime === 'string') {\n        if (dateTime.toString().length == 10) dateTime = Number(dateTime) * 1000;\n    }\n    const date = new Date(dateTime);\n    let ret: RegExpExecArray | null;\n    const opt: Record<string, string> = {\n        'y+': date.getFullYear().toString(), // 年\n        'm+': (date.getMonth() + 1).toString(), // 月\n        'd+': date.getDate().toString(), // 日\n        'h+': date.getHours().toString(), // 时\n        'M+': date.getMinutes().toString(), // 分\n        's+': date.getSeconds().toString() // 秒\n        // 有其他格式化字符需求可以继续添加，必须转化成字符串\n    };\n    for (const k in opt) {\n        ret = new RegExp('(' + k + ')').exec(fmt);\n        if (ret) {\n            fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, '0'));\n        }\n    }\n    return fmt;\n}\n\nexport default timeFormat;\n", "import timeFormat from './timeFormat';\n\n/**\n * 时间戳转为多久之前\n * @param dateTime 时间戳、Date对象或null，默认当前时间\n * @param format 时间格式字符串或false，超出范围时返回指定格式，否则返回多久以前\n * @returns 格式化后的时间字符串\n */\nfunction timeFrom(dateTime: number | string | Date | null = null, format: string | false = 'yyyy-mm-dd'): string {\n    // 如果为null,则格式化当前时间\n    if (!dateTime) dateTime = Number(new Date());\n    // 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\n    if (typeof dateTime === 'number' || typeof dateTime === 'string') {\n        if (dateTime.toString().length == 10) dateTime = Number(dateTime) * 1000;\n    }\n    const timestamp = +new Date(Number(dateTime));\n    const timer = (Number(new Date()) - timestamp) / 1000;\n    // 如果小于5分钟,则返回\"刚刚\",其他以此类推\n    let tips = '';\n    switch (true) {\n        case timer < 300:\n            tips = '刚刚';\n            break;\n        case timer >= 300 && timer < 3600:\n            tips = parseInt(String(timer / 60)) + '分钟前';\n            break;\n        case timer >= 3600 && timer < 86400:\n            tips = parseInt(String(timer / 3600)) + '小时前';\n            break;\n        case timer >= 86400 && timer < 2592000:\n            tips = parseInt(String(timer / 86400)) + '天前';\n            break;\n        default:\n            // 如果format为false，则无论什么时间戳，都显示xx之前\n            if (format === false) {\n                if (timer >= 2592000 && timer < 365 * 86400) {\n                    tips = parseInt(String(timer / (86400 * 30))) + '个月前';\n                } else {\n                    tips = parseInt(String(timer / (86400 * 365))) + '年前';\n                }\n            } else {\n                tips = timeFormat(timestamp, format as string);\n            }\n    }\n    return tips;\n}\n\nexport default timeFrom;\n", "/**\n * 求两个颜色之间的渐变值\n * @param startColor 开始的颜色\n * @param endColor 结束的颜色\n * @param step 颜色等分的份额\n * @returns 渐变色数组\n */\nfunction colorGradient(startColor: string = 'rgb(0, 0, 0)', endColor: string = 'rgb(255, 255, 255)', step: number = 10): string[] {\n    const startRGB = hexToRgb(startColor, false) as [number, number, number]; // 转换为rgb数组模式\n    const [startR, startG, startB] = startRGB;\n    const endRGB = hexToRgb(endColor, false) as [number, number, number];\n    const [endR, endG, endB] = endRGB;\n\n    const sR = (endR - startR) / step; // 总差值\n    const sG = (endG - startG) / step;\n    const sB = (endB - startB) / step;\n    const colorArr: string[] = [];\n    for (let i = 0; i < step; i++) {\n        // 计算每一步的hex值\n        const hex = rgbToHex(`rgb(${Math.round(sR * i + startR)},${Math.round(sG * i + startG)},${Math.round(sB * i + startB)})`);\n        colorArr.push(hex as string);\n    }\n    return colorArr;\n}\n\n/**\n * 将hex表示方式转换为rgb表示方式(返回rgb数组或字符串)\n * @param sColor hex或rgb字符串\n * @param str 是否返回字符串\n * @returns rgb数组或字符串\n */\nfunction hexToRgb(sColor: string, str: boolean = true): [number, number, number] | string {\n    const reg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\n    sColor = sColor.toLowerCase();\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            let sColorNew = '#';\n            for (let i = 1; i < 4; i += 1) {\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\n            }\n            sColor = sColorNew;\n        }\n        // 处理六位的颜色值\n        const sColorChange: [number, number, number] = [parseInt('0x' + sColor.slice(1, 3)), parseInt('0x' + sColor.slice(3, 5)), parseInt('0x' + sColor.slice(5, 7))];\n        if (!str) {\n            return sColorChange;\n        } else {\n            return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;\n        }\n    } else if (/^(rgb|RGB)/.test(sColor)) {\n        const arr = sColor.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',');\n        return arr.map(val => Number(val)) as [number, number, number];\n    } else {\n        return sColor;\n    }\n}\n\n/**\n * rgb转hex\n * @param rgb rgb字符串或hex字符串\n * @returns hex字符串\n */\nfunction rgbToHex(rgb: string): string | undefined {\n    const reg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\n    if (/^(rgb|RGB)/.test(rgb)) {\n        const aColor = rgb.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',');\n        let strHex = '#';\n        for (let i = 0; i < aColor.length; i++) {\n            let hex = Number(aColor[i]).toString(16);\n            hex = hex.length == 1 ? '0' + hex : hex; // 保证每个rgb的值为2位\n            strHex += hex;\n        }\n        if (strHex.length !== 7) {\n            strHex = rgb;\n        }\n        return strHex;\n    } else if (reg.test(rgb)) {\n        const aNum = rgb.replace(/#/, '').split('');\n        if (aNum.length === 6) {\n            return rgb;\n        } else if (aNum.length === 3) {\n            let numHex = '#';\n            for (let i = 0; i < aNum.length; i += 1) {\n                numHex += aNum[i] + aNum[i];\n            }\n            return numHex;\n        }\n    } else {\n        return rgb;\n    }\n    // 默认返回原始值\n    return rgb;\n}\n\n/**\n * JS颜色十六进制转换为rgb或rgba,返回的格式为 rgba（255，255，255，0.5）字符串\n * @param color 十六进制色值或rgb字符串\n * @param alpha 透明度\n * @returns rgba字符串\n */\nfunction colorToRgba(color: string, alpha: number = 0.3): string {\n    color = rgbToHex(color) as string; // 确保是hex格式\n    const reg = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\n    let sColor = color.toLowerCase();\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            let sColorNew = '#';\n            for (let i = 1; i < 4; i += 1) {\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\n            }\n            sColor = sColorNew;\n        }\n        const sColorChange: [number, number, number] = [parseInt('0x' + sColor.slice(1, 3)), parseInt('0x' + sColor.slice(3, 5)), parseInt('0x' + sColor.slice(5, 7))];\n        return `rgba(${sColorChange.join(',')},${alpha})`;\n    } else {\n        return sColor;\n    }\n}\n\nexport default {\n    colorGradient,\n    hexToRgb,\n    rgbToHex,\n    colorToRgba\n};\n", "/**\n * 本算法来源于简书开源代码，详见：https://www.jianshu.com/p/fdbf293d0a85\n * 全局唯一标识符（uuid，Globally Unique Identifier）,也称作 uuid(Universally Unique IDentifier)\n * 一般用于多个组件之间,给它一个唯一的标识符,或者v-for循环的时候,如果使用数组的index可能会导致更新列表出现问题\n * 最可能的情况是左滑删除item或者对某条信息流\"不喜欢\"并去掉它的时候,会导致组件内的数据可能出现错乱\n * v-for的时候,推荐使用后端返回的id而不是循环的index\n * @param len uuid的长度，默认32\n * @param firstU 将返回的首字母置为\"u\"，默认true\n * @param radix 生成uuid的基数(意味着返回的字符串都是这个基数),2-二进制,8-八进制,10-十进制,16-十六进制\n * @returns 生成的uuid字符串\n */\nfunction guid(len: number = 32, firstU: boolean = true, radix?: number): string {\n    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    const uuid: string[] = [];\n    const base = radix || chars.length;\n\n    if (len) {\n        // 如果指定uuid长度,只是取随机的字符,0|x为位运算,能去掉x的小数位,返回整数位\n        for (let i = 0; i < len; i++) uuid[i] = chars[0 | (Math.random() * base)];\n    } else {\n        let r: number;\n        // rfc4122标准要求返回的uuid中,某些位为固定的字符\n        uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n        uuid[14] = '4';\n\n        for (let i = 0; i < 36; i++) {\n            if (!uuid[i]) {\n                r = 0 | (Math.random() * 16);\n                uuid[i] = chars[i == 19 ? (r & 0x3) | 0x8 : r];\n            }\n        }\n    }\n    // 移除第一个字符,并用u替代,因为第一个字符为数值时,该guid不能用作id或者class\n    if (firstU) {\n        uuid.shift();\n        return 'u' + uuid.join('');\n    } else {\n        return uuid.join('');\n    }\n}\n\nexport default guid;\n", "// 为了让用户能够自定义主题，会逐步弃用此文件，各颜色通过css提供\n// 为了给某些特殊场景使用和向后兼容，无需删除此文件(2020-06-20)\nlet color = {\n    primary: '#2979ff',\n    primaryDark: '#2b85e4',\n    primaryDisabled: '#a0cfff',\n    primaryLight: '#ecf5ff',\n    bgColor: '#f3f4f6',\n\n    info: '#909399',\n    infoDark: '#82848a',\n    infoDisabled: '#c8c9cc',\n    infoLight: '#f4f4f5',\n\n    warning: '#ff9900',\n    warningDark: '#f29100',\n    warningDisabled: '#fcbd71',\n    warningLight: '#fdf6ec',\n\n    error: '#fa3534',\n    errorDark: '#dd6161',\n    errorDisabled: '#fab6b6',\n    errorLight: '#fef0f0',\n\n    success: '#19be6b',\n    successDark: '#18b566',\n    successDisabled: '#71d5a1',\n    successLight: '#dbf1e1',\n\n    mainColor: '#303133',\n    contentColor: '#606266',\n    tipsColor: '#909399',\n    lightColor: '#c0c4cc',\n    borderColor: '#e4e7ed'\n};\n\nexport default color;\n", "/**\n * 根据主题type值,获取对应的图标\n * @param type 主题名称, primary|info|error|warning|success，默认success\n * @param fill 是否使用fill填充实体的图标，默认false\n * @returns 图标名称字符串\n */\nfunction type2icon(type: 'primary' | 'info' | 'error' | 'warning' | 'success' = 'success', fill: boolean = false): string {\n    // 如果非预置值,默认为success\n    if (!['primary', 'info', 'error', 'warning', 'success'].includes(type)) type = 'success';\n    let iconName = '';\n    // 目前(2019-12-12),info和primary使用同一个图标\n    switch (type) {\n        case 'primary':\n            iconName = 'info-circle';\n            break;\n        case 'info':\n            iconName = 'info-circle';\n            break;\n        case 'error':\n            iconName = 'close-circle';\n            break;\n        case 'warning':\n            iconName = 'error-circle';\n            break;\n        case 'success':\n            iconName = 'checkmark-circle';\n            break;\n        default:\n            iconName = 'checkmark-circle';\n    }\n    // 是否是实体类型,加上-fill,在icon组件库中,实体的类名是后面加-fill的\n    if (fill) iconName += '-fill';\n    return iconName;\n}\n\nexport default type2icon;\n", "/**\n * 打乱数组顺序\n * @param array 需要打乱的数组\n * @returns 打乱后的新数组\n */\nfunction randomArray<T>(array: T[] = []): T[] {\n    // 原理是sort排序,Math.random()产生0<= x < 1之间的数,会导致x-0.5大于或者小于0\n    return array.sort(() => Math.random() - 0.5);\n}\n\nexport default randomArray;\n", "// 判断arr是否为一个数组，返回一个bool值\nfunction isArray(arr: any): arr is any[] {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n}\n\n/**\n * 深度克隆\n * @param obj 需要克隆的对象\n * @param cache 用于处理循环引用的 WeakMap\n * @returns 克隆后的对象\n */\nfunction deepClone<T>(obj: T, cache: WeakMap<any, any> = new WeakMap()): T {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (cache.has(obj)) return cache.get(obj);\n    let clone: any;\n    if (obj instanceof Date) {\n        clone = new Date(obj.getTime());\n    } else if (obj instanceof RegExp) {\n        clone = new RegExp(obj);\n    } else if (obj instanceof Map) {\n        clone = new Map(Array.from(obj, ([key, value]) => [key, deepClone(value, cache)]));\n    } else if (obj instanceof Set) {\n        clone = new Set(Array.from(obj, value => deepClone(value, cache)));\n    } else if (Array.isArray(obj)) {\n        clone = obj.map(value => deepClone(value, cache));\n    } else if (Object.prototype.toString.call(obj) === '[object Object]') {\n        clone = Object.create(Object.getPrototypeOf(obj));\n        cache.set(obj, clone);\n        for (const [key, value] of Object.entries(obj)) {\n            clone[key] = deepClone(value, cache);\n        }\n    } else {\n        clone = Object.assign({}, obj);\n    }\n    cache.set(obj, clone);\n    return clone;\n}\n\nexport default deepClone;\n", "import deepClone from './deepClone';\n\n/**\n * JS对象深度合并\n * @param target 目标对象\n * @param source 源对象\n * @returns 合并后的对象\n */\nfunction deepMerge<T extends object, S extends object>(target: T = {} as T, source: S = {} as S): T & S {\n    target = deepClone(target);\n    if (typeof target !== 'object' || target === null || typeof source !== 'object' || source === null) return target as T & S;\n    const merged: any = Array.isArray(target) ? target.slice() : Object.assign({}, target);\n    for (const prop in source) {\n        if (!Object.prototype.hasOwnProperty.call(source, prop)) continue;\n        const sourceValue = (source as any)[prop];\n        const targetValue = merged[prop];\n        if (sourceValue instanceof Date) {\n            merged[prop] = new Date(sourceValue);\n        } else if (sourceValue instanceof RegExp) {\n            merged[prop] = new RegExp(sourceValue);\n        } else if (sourceValue instanceof Map) {\n            merged[prop] = new Map(sourceValue);\n        } else if (sourceValue instanceof Set) {\n            merged[prop] = new Set(sourceValue);\n        } else if (typeof sourceValue === 'object' && sourceValue !== null) {\n            merged[prop] = deepMerge(targetValue, sourceValue);\n        } else {\n            merged[prop] = sourceValue;\n        }\n    }\n    return merged as T & S;\n}\n\nexport default deepMerge;\n", "/**\n * 验证电子邮箱格式\n */\nfunction email(value: string): boolean {\n    return /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/.test(value);\n}\n\n/**\n * 验证手机格式\n */\nfunction mobile(value: string): boolean {\n    return /^1[3-9]\\d{9}$/.test(value);\n}\n\n/**\n * 验证URL格式\n */\nfunction url(value: string): boolean {\n    return /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w-.\\/?%&=]*)?/.test(value);\n}\n\n/**\n * 验证日期格式\n */\nfunction date(value: string): boolean {\n    return !/Invalid|NaN/.test(new Date(value).toString());\n}\n\n/**\n * 验证ISO类型的日期格式\n */\nfunction dateISO(value: string): boolean {\n    return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);\n}\n\n/**\n * 验证十进制数字\n */\nfunction number(value: string): boolean {\n    return /^[\\+-]?(\\d+\\.?\\d*|\\.\\d+|\\d\\.\\d+e\\+\\d+)$/.test(value);\n}\n\n/**\n * 验证整数\n */\nfunction digits(value: string): boolean {\n    return /^\\d+$/.test(value);\n}\n\n/**\n * 验证身份证号码\n */\nfunction idCard(value: string): boolean {\n    return /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(value);\n}\n\n/**\n * 是否车牌号\n */\nfunction carNo(value: string): boolean {\n    // 新能源车牌\n    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;\n    // 旧车牌\n    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;\n    if (value.length === 7) {\n        return creg.test(value);\n    } else if (value.length === 8) {\n        return xreg.test(value);\n    } else {\n        return false;\n    }\n}\n\n/**\n * 金额,只允许2位小数\n */\nfunction amount(value: string): boolean {\n    //金额，只允许保留两位小数\n    return /^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0\\.\\d{1,2}$/.test(value);\n}\n\n/**\n * 中文\n */\nfunction chinese(value: string): boolean {\n    let reg = /^[\\u4e00-\\u9fa5]+$/gi;\n    return reg.test(value);\n}\n\n/**\n * 只能输入字母\n */\nfunction letter(value: string): boolean {\n    return /^[a-zA-Z]*$/.test(value);\n}\n\n/**\n * 只能是字母或者数字\n */\nfunction enOrNum(value: string): boolean {\n    //英文或者数字\n    let reg = /^[0-9a-zA-Z]*$/g;\n    return reg.test(value);\n}\n\n/**\n * 验证是否包含某个值\n */\nfunction contains(value: string, param: string): boolean {\n    return value.indexOf(param) >= 0;\n}\n\n/**\n * 验证一个值范围[min, max]\n */\nfunction range(value: number, param: [number, number]): boolean {\n    return value >= param[0] && value <= param[1];\n}\n\n/**\n * 验证一个长度范围[min, max]\n */\nfunction rangeLength(value: string, param: [number, number]): boolean {\n    return value.length >= param[0] && value.length <= param[1];\n}\n\n/**\n * 是否固定电话\n */\nfunction landline(value: string): boolean {\n    let reg = /^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$/;\n    return reg.test(value);\n}\n\n/**\n * 判断是否为空\n */\nfunction empty(value: any): boolean {\n    switch (typeof value) {\n        case 'undefined':\n            return true;\n        case 'string':\n            if (value.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '').length == 0) return true;\n            break;\n        case 'boolean':\n            if (!value) return true;\n            break;\n        case 'number':\n            if (0 === value || isNaN(value)) return true;\n            break;\n        case 'object':\n            if (null === value || value.length === 0) return true;\n            for (var i in value) {\n                return false;\n            }\n            return true;\n    }\n    return false;\n}\n\n/**\n * 是否json字符串\n */\nfunction jsonString(value: string): boolean {\n    if (typeof value == 'string') {\n        try {\n            var obj = JSON.parse(value);\n            if (typeof obj == 'object' && obj) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\n\n/**\n * 是否数组\n */\nfunction array(value: any): boolean {\n    if (typeof Array.isArray === 'function') {\n        return Array.isArray(value);\n    } else {\n        return Object.prototype.toString.call(value) === '[object Array]';\n    }\n}\n\n/**\n * 是否对象\n */\nfunction object(value: any): boolean {\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * 是否短信验证码\n */\nfunction code(value: string, len: number = 6): boolean {\n    return new RegExp(`^\\\\d{${len}}$`).test(value);\n}\n\nexport default {\n    email,\n    mobile,\n    url,\n    date,\n    dateISO,\n    number,\n    digits,\n    idCard,\n    carNo,\n    amount,\n    chinese,\n    letter,\n    enOrNum,\n    contains,\n    range,\n    rangeLength,\n    empty,\n    isEmpty: empty,\n    jsonString,\n    landline,\n    object,\n    array,\n    code\n};\n", "import validation from './test';\n\n/**\n * 添加单位，如果有rpx，%，px等单位结尾或者值为auto，直接返回，否则加上rpx单位结尾\n * @param value 输入值，可以为字符串或数字，默认'auto'\n * @param unit 单位，默认'rpx'\n * @returns 添加单位后的字符串\n */\nexport default function addUnit(value: string | number = 'auto', unit: string = 'rpx'): string {\n    const strValue = String(value);\n    // 用uView内置验证规则中的number判断是否为数值\n    return validation.number(strValue) ? `${strValue}${unit}` : strValue;\n}\n", "/**\n * 生成指定范围的随机整数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @returns 随机整数\n */\nfunction random(min: number, max: number): number {\n    if (min >= 0 && max > 0 && max >= min) {\n        const gab = max - min + 1;\n        return Math.floor(Math.random() * gab + min);\n    } else {\n        return 0;\n    }\n}\n\nexport default random;\n", "/**\n * 去除字符串空格\n * @param str 输入字符串\n * @param pos 去除位置，'both' | 'left' | 'right' | 'all'，默认'both'\n * @returns 去除空格后的字符串\n */\nfunction trim(str: string, pos: 'both' | 'left' | 'right' | 'all' = 'both'): string {\n    if (pos === 'both') {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    } else if (pos === 'left') {\n        return str.replace(/^\\s*/, '');\n    } else if (pos === 'right') {\n        return str.replace(/(\\s*$)/g, '');\n    } else if (pos === 'all') {\n        return str.replace(/\\s+/g, '');\n    } else {\n        return str;\n    }\n}\n\nexport default trim;\n", "/**\n * 显示无图标的 Toast 提示\n * @param title 提示文本\n * @param option 显示时长（毫秒）默认1500 /显示图标，默认为none，\n */\nfunction toast(title: string, option: number | string | Record<string, any> = 1500): void {\n    uni.showToast({\n        title: title,\n        icon: typeof option === 'string' ? option : typeof option === 'object' ? option.icon || 'none' : 'none',\n        duration: typeof option === 'number' ? option : typeof option === 'object' ? option.duration || '1500' : 1500\n    });\n}\n\nexport default toast;\n", "// 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法\n// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx\ninterface VueInstance {\n    $parent?: VueInstance;\n    $options?: { name?: string };\n    [key: string]: any;\n}\n\n/**\n * 获取父组件参数\n * @param this 当前组件实例\n * @param name 父组件name\n * @param keys 需要获取的参数名数组或对象\n * @returns 父组件参数对象\n */\nexport default function getParent(this: VueInstance, name: string, keys: string[] | Record<string, any>): Record<string, any> {\n    let parent = this.$parent;\n    // 通过while历遍，这里主要是为了H5需要多层解析的问题\n    while (parent) {\n        // 父组件\n        if (parent.$options?.name !== name) {\n            // 如果组件的name不相等，继续上一级寻找\n            parent = parent.$parent;\n        } else {\n            const data: Record<string, any> = {};\n            // 判断keys是否数组，如果传过来的是一个数组，那么直接使用数组元素值当做键值去父组件寻找\n            if (Array.isArray(keys)) {\n                keys.forEach(val => {\n                    data[val] = parent?.[val] ? parent[val] : '';\n                });\n            } else {\n                // 历遍传过来的对象参数\n                for (const i in keys) {\n                    // 如果子组件有此值则用，无此值则用父组件的值\n                    // 判断是否空数组，如果是，则用父组件的值，否则用子组件的值\n                    if (Array.isArray(keys[i])) {\n                        if (keys[i].length) {\n                            data[i] = keys[i];\n                        } else {\n                            data[i] = parent[i];\n                        }\n                    } else if (keys[i] && keys[i].constructor === Object) {\n                        // 判断是否对象，如果是对象，且有属性，那么使用子组件的值，否则使用父组件的值\n                        if (Object.keys(keys[i]).length) {\n                            data[i] = keys[i];\n                        } else {\n                            data[i] = parent[i];\n                        }\n                    } else {\n                        // 只要子组件有传值，即使是false值，也是“传值”了，也需要覆盖父组件的同名参数\n                        data[i] = keys[i] || keys[i] === false ? keys[i] : parent[i];\n                    }\n                }\n            }\n            return data;\n        }\n    }\n    return {};\n}\n", "// 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法\n// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx\n// 这里默认值等于undefined有它的含义，因为最顶层元素(组件)的$parent就是undefined，意味着不传name\n// 值(默认为undefined)，就是查找最顶层的$parent\nimport { type ComponentInternalInstance, getCurrentInstance } from 'vue';\n\nexport default function $parent(componentName?: string, _instance: ComponentInternalInstance | null | undefined = null) {\n    const instance: ComponentInternalInstance | null | undefined = _instance || getCurrentInstance();\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n\n    if (!componentName) return parent;\n\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n", "/**\n * 获取当前操作系统平台\n * @returns 平台字符串，如 'ios'、'android'、'windows' 等\n */\nexport function os(): string {\n    return uni.getSystemInfoSync().platform;\n}\n\n/**\n * 获取系统信息\n * @returns uniapp 系统信息对象\n */\nexport function sys(): UniApp.GetSystemInfoResult {\n    return uni.getSystemInfoSync();\n}\n", "let timeout: ReturnType<typeof setTimeout> | null = null;\n\n/**\n * 防抖原理：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数\n * @param func 要执行的回调函数\n * @param wait 延时的时间，单位ms，默认500\n * @param immediate 是否立即执行，默认false\n * @returns void\n */\nfunction debounce(func: () => void, wait: number = 500, immediate: boolean = false): void {\n    // 清除定时器\n    if (timeout !== null) clearTimeout(timeout);\n    // 立即执行，此类情况一般用不到\n    if (immediate) {\n        const callNow = !timeout;\n        timeout = setTimeout(() => {\n            timeout = null;\n        }, wait);\n        if (callNow) typeof func === 'function' && func();\n    } else {\n        // 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法\n        timeout = setTimeout(() => {\n            typeof func === 'function' && func();\n        }, wait);\n    }\n}\n\nexport default debounce;\n", "let timer: ReturnType<typeof setTimeout> | undefined;\nlet flag: boolean | undefined;\n/**\n * 节流原理：在一定时间内，只能触发一次\n * @param func 要执行的回调函数\n * @param wait 延时的时间，单位ms，默认500\n * @param immediate 是否立即执行，默认true\n * @returns void\n */\nfunction throttle(func: () => void, wait: number = 500, immediate: boolean = true): void {\n    if (immediate) {\n        if (!flag) {\n            flag = true;\n            // 如果是立即执行，则在wait毫秒内开始时执行\n            typeof func === 'function' && func();\n            timer = setTimeout(() => {\n                flag = false;\n            }, wait);\n        }\n    } else {\n        if (!flag) {\n            flag = true;\n            // 如果是非立即执行，则在wait毫秒内的结束处执行\n            timer = setTimeout(() => {\n                flag = false;\n                typeof func === 'function' && func();\n            }, wait);\n        }\n    }\n}\nexport default throttle;\n", "/**\n * 获取元素的位置信息\n * @param {any} selector 选择器\n * @param {boolean} all 是否获取所有匹配元素\n * @returns {Promise<any>} 返回一个 Promise，解析为元素的位置信息\n */\n\nimport { getCurrentInstance } from 'vue';\n\nexport default function (selector: any, _instance: any = null, all: boolean = false): Promise<any> {\n    const instance = _instance || getCurrentInstance();\n    return new Promise(resolve => {\n        uni.createSelectorQuery()\n            .in(instance?.proxy)\n            [all ? 'selectAll' : 'select'](selector)\n            .boundingClientRect((rect: any) => {\n                if (all && Array.isArray(rect) && rect.length) {\n                    resolve(rect);\n                }\n                if (!all && rect) {\n                    resolve(rect);\n                }\n            })\n            .exec();\n    });\n}\n", "import { type ComponentInternalInstance, getCurrentInstance } from 'vue';\n\nexport function parent(componentName?: string, _instance: ComponentInternalInstance | null | undefined = null) {\n    const instance = _instance || getCurrentInstance();\n\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\nexport function parentData(componentName?: string, _instance: ComponentInternalInstance | null | undefined = null) {\n    const instance = _instance || getCurrentInstance();\n    const findParent = parent(componentName, instance);\n    return findParent ? findParent.exposed : null;\n}\n", "{\n    \"id\": \"uview-pro\",\n    \"name\": \"uview-pro\",\n    \"displayName\": \"【Vue3重构版】uView Pro｜基于Vue3+TS全面重构的70+精选UI组件库\",\n    \"version\": \"0.0.22\",\n    \"description\": \"uView Pro，是全面支持Vue3的uni-app生态框架，70+精选组件已使用TypeScript重构，已全面支持uni-app Vue3.0\",\n    \"main\": \"index.ts\",\n    \"module\": \"index.ts\",\n    \"browser\": \"index.ts\",\n    \"keywords\": [\n        \"uni-app\",\n        \"library\",\n        \"component\",\n        \"uView\",\n        \"Vue3\"\n    ],\n    \"author\": \"anyup\",\n    \"license\": \"MIT\",\n    \"repository\": \"https://github.com/anyup/uview-pro\",\n    \"engines\": {\n        \"HBuilderX\": \"^4.07\",\n        \"uni-app\": \"^4.07\",\n        \"uni-app-x\": \"\"\n    },\n    \"dcloudext\": {\n        \"type\": \"component-vue\",\n        \"sale\": {\n            \"regular\": {\n                \"price\": \"0.00\"\n            },\n            \"sourcecode\": {\n                \"price\": \"0.00\"\n            }\n        },\n        \"contact\": {\n            \"qq\": \"491302297\"\n        },\n        \"declaration\": {\n            \"ads\": \"无\",\n            \"data\": \"无\",\n            \"permissions\": \"无\"\n        },\n        \"npmurl\": \"https://www.npmjs.com/package/uview-pro\",\n        \"darkmode\": \"x\",\n        \"i18n\": \"x\",\n        \"widescreen\": \"x\"\n    },\n    \"uni_modules\": {\n        \"dependencies\": [],\n        \"encrypt\": [],\n        \"platforms\": {\n            \"cloud\": {\n                \"tcb\": \"√\",\n                \"aliyun\": \"√\",\n                \"alipay\": \"√\"\n            },\n            \"client\": {\n                \"uni-app\": {\n                    \"vue\": {\n                        \"vue2\": \"x\",\n                        \"vue3\": \"√\"\n                    },\n                    \"web\": {\n                        \"safari\": \"√\",\n                        \"chrome\": \"√\"\n                    },\n                    \"app\": {\n                        \"vue\": \"√\",\n                        \"nvue\": \"-\",\n                        \"android\": \"√\",\n                        \"ios\": \"√\",\n                        \"harmony\": \"-\"\n                    },\n                    \"mp\": {\n                        \"weixin\": \"√\",\n                        \"alipay\": \"-\",\n                        \"toutiao\": \"-\",\n                        \"baidu\": \"-\",\n                        \"kuaishou\": \"-\",\n                        \"jd\": \"-\",\n                        \"harmony\": \"-\",\n                        \"qq\": \"-\",\n                        \"lark\": \"-\"\n                    },\n                    \"quickapp\": {\n                        \"huawei\": \"-\",\n                        \"union\": \"-\"\n                    }\n                },\n                \"uni-app-x\": {\n                    \"web\": {\n                        \"safari\": \"-\",\n                        \"chrome\": \"-\"\n                    },\n                    \"app\": {\n                        \"android\": \"-\",\n                        \"ios\": \"-\",\n                        \"harmony\": \"-\"\n                    },\n                    \"mp\": {\n                        \"weixin\": \"-\"\n                    }\n                }\n            }\n        }\n    }\n}\n", "// 此版本发布于2023-03-27\n/**\n * 组件库配置项类型定义\n */\n\nimport { version } from '../../package.json';\n\nexport interface AppConfig {\n    /** 版本号 */\n    v: string;\n    /** 版本号（冗余字段） */\n    version: string;\n    /** 主题名称列表 */\n    type: string[];\n}\n\n// const version: string = '1.8.8';\n\nconst config: AppConfig = {\n    v: version,\n    version: version,\n    // 主题名称\n    type: ['primary', 'success', 'info', 'error', 'warning']\n};\n\nexport default config;\n", "// uniapp在H5中各API的z-index值如下：\n/**\n * actionsheet: 999\n * modal: 999\n * navigate: 998\n * tabbar: 998\n * toast: 999\n */\n\n/**\n * 组件库 z-index 配置项类型定义\n */\nexport interface ZIndexConfig {\n    toast: number;\n    noNetwork: number;\n    /** popup包含popup，actionsheet，keyboard，picker的值 */\n    popup: number;\n    mask: number;\n    navbar: number;\n    topTips: number;\n    sticky: number;\n    indexListSticky: number;\n}\n\nconst zIndex: ZIndexConfig = {\n    toast: 10090,\n    noNetwork: 10080,\n    // popup包含popup，actionsheet，keyboard，picker的值\n    popup: 10075,\n    mask: 10070,\n    navbar: 980,\n    topTips: 975,\n    sticky: 970,\n    indexListSticky: 965\n};\n\nexport default zIndex;\n", "import { getCurrentInstance, type ComponentInternalInstance } from 'vue';\n\n/**\n * 适用于 uni-app Vue3 的事件派发/广播工具\n * 用法：import { dispatch, broadcast } from './emitter'\n */\n\n/**\n * 向上查找父组件并派发事件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @param eventName 事件名\n * @param params 参数\n */\n\n// 将事件名转换为驼峰格式\n// 例如：on-form-change -> onFormChange\nfunction formatToCamelCase(str: string): string {\n    return str.replace(/-([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n    });\n}\n\n/**\n * 向上查找父组件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @returns 父组件实例\n */\nfunction parent(instance: ComponentInternalInstance | null | undefined = undefined, componentName: string = '') {\n    if (!instance) {\n        instance = getCurrentInstance();\n    }\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n\n    if (!componentName) return parent;\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n\n/** * 向上查找父组件并派发事件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @param eventName 事件名\n * @param params 参数\n */\nfunction dispatch(instance: ComponentInternalInstance | null | undefined, componentName: string, eventName: string, ...params: any[]) {\n    let parent = instance && (instance.parent as ComponentInternalInstance | null | undefined);\n    while (parent) {\n        const name = (parent.type as any)?.name as string | undefined;\n        if (name === componentName) {\n            // 找到目标组件，派发事件\n            // Vue3未解决，目标组件事件监听失效，待优化，暂时使用下面的方式解决，如果你有好的方式也可以告诉我或者提PR\n            parent.emit && parent.emit(eventName, ...params);\n            // 如果有对应的方法，执行方法\n            // 这里可以考虑将 eventName 转换为驼峰格式\n            // 例如：on-form-change -> onFormChange\n            parent.exposed?.[formatToCamelCase(eventName)] && parent.exposed[formatToCamelCase(eventName)](...params);\n            break;\n        }\n        parent = parent.parent;\n    }\n}\n\n/**\n * 向下递归查找子组件并广播事件\n * @param instance 当前组件实例（setup中可用getCurrentInstance()）\n * @param componentName 目标组件名\n * @param eventName 事件名\n * @param params 参数\n */\nfunction broadcast(instance: ComponentInternalInstance | null | undefined, componentName: string, eventName: string, ...params: any[]) {\n    if (!instance) return;\n    const subTree = (instance.subTree as any)?.children || [];\n    const children = Array.isArray(subTree) ? subTree : [subTree];\n    children.forEach((vnode: any) => {\n        const child = vnode.component as ComponentInternalInstance | undefined;\n\n        if (child) {\n            const name = (child.type as any)?.name as string | undefined;\n            if (name === componentName) {\n                // 找到目标组件，广播事件\n                // Vue3未解决，目标组件事件监听失效，待优化，暂时使用下面的方式解决，如果你有好的方式也可以告诉我或者提PR\n                child.emit && child.emit(eventName, ...params);\n                // 如果有对应的方法，执行方法\n                // 这里可以考虑将 eventName 转换为驼峰格式\n                // 例如：on-form-change -> onFormChange\n                child.exposed?.[formatToCamelCase(eventName)] && child.exposed[formatToCamelCase(eventName)](...params);\n            } else {\n                broadcast(child, componentName, eventName, ...params);\n            }\n        }\n    });\n}\n\nexport { dispatch, broadcast, parent };\n", "/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * copy to https://github.com/developit/mitt\n * Expand clear method\n */\nexport type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (type: keyof T, event: T[keyof T]) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<WildcardHandler<T>>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<'*' | keyof Events, EventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n    all: EventHandlerMap<Events>;\n\n    on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n    on(type: '*', handler: WildcardHandler<Events>): void;\n\n    off<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;\n    off(type: '*', handler: WildcardHandler<Events>): void;\n\n    emit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n    emit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;\n    clear(): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport function mitt<Events extends Record<EventType, unknown>>(all?: EventHandlerMap<Events>): Emitter<Events> {\n    type GenericEventHandler = Handler<Events[keyof Events]> | WildcardHandler<Events>;\n    all = all || new Map();\n\n    return {\n        /**\n         * A Map of event names to registered handler functions.\n         */\n        all,\n\n        /**\n         * Register an event handler for the given type.\n         * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n         * @param {Function} handler Function to call in response to given event\n         * @memberOf mitt\n         */\n        on<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n            const handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n            if (handlers) {\n                handlers.push(handler);\n            } else {\n                all!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n            }\n        },\n\n        /**\n         * Remove an event handler for the given type.\n         * If `handler` is omitted, all handlers of the given type are removed.\n         * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\n         * @param {Function} [handler] Handler function to remove\n         * @memberOf mitt\n         */\n        off<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n            const handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n            if (handlers) {\n                if (handler) {\n                    handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n                } else {\n                    all!.set(type, []);\n                }\n            }\n        },\n\n        /**\n         * Invoke all handlers for the given type.\n         * If present, `'*'` handlers are invoked after type-matched handlers.\n         *\n         * Note: Manually firing '*' handlers is not supported.\n         *\n         * @param {string|symbol} type The event type to invoke\n         * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n         * @memberOf mitt\n         */\n        emit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n            let handlers = all!.get(type);\n            if (handlers) {\n                [...(handlers as EventHandlerList<Events[keyof Events]>)].forEach(handler => {\n                    handler(evt as Events[Key]);\n                });\n            }\n\n            handlers = all!.get('*');\n            if (handlers) {\n                [...(handlers as WildCardEventHandlerList<Events>)].forEach(handler => {\n                    handler(type, evt as Events[Key]);\n                });\n            }\n        },\n\n        /**\n         * Clear all\n         */\n        clear() {\n            this.all.clear();\n        }\n    };\n}\n", "import deepMerge from '../function/deepMerge';\n\n/**\n * 请求配置项Meta类型定义\n */\nexport interface RequestMeta {\n    toast?: boolean;\n    loading?: boolean;\n    originalData?: boolean;\n    [key: string]: any;\n}\n\n/**\n * 请求配置项类型定义\n */\nexport interface RequestConfig {\n    baseUrl?: string;\n    header?: Record<string, any>;\n    method?: string;\n    dataType?: string;\n    responseType?: string;\n    meta?: RequestMeta;\n}\n\n/**\n * 请求拦截器类型定义\n */\nexport interface RequestInterceptor {\n    request?: ((options: RequestOptions) => RequestOptions | false) | null;\n    response?: ((response: any) => any | false) | null;\n}\n\n/**\n * 请求参数类型定义\n */\nexport interface RequestOptions {\n    url: string;\n    header?: Record<string, any>;\n    method?: 'GET' | 'POST' | 'OPTIONS' | 'HEAD' | 'PUT' | 'DELETE' | 'TRACE' | 'CONNECT';\n    data?: any;\n    dataType?: string;\n    responseType?: string;\n    params?: Record<string, any>;\n    complete?: (response: any) => void;\n    meta?: RequestMeta;\n}\n\nexport class Request {\n    public config: RequestConfig;\n    public interceptor: RequestInterceptor;\n    public options?: RequestOptions;\n\n    constructor() {\n        this.config = {\n            baseUrl: '', // 请求的根域名\n            header: {}, // 默认的请求头\n            method: 'POST', // 请求方式\n            dataType: 'json', // 设置为json，返回后uni.request会对数据进行一次JSON.parse\n            responseType: 'text', // 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可\n            meta: {\n                originalData: true, // 是否在拦截器中返回服务端的原始数据，见文档说明\n                toast: false, // 是否在请求出错时，弹出toast\n                loading: false // 是否显示加载中\n            }\n        };\n        this.interceptor = {\n            request: null,\n            response: null\n        };\n    }\n    /**\n     * 设置全局默认配置\n     * @param customConfig 自定义配置\n     */\n    setConfig(customConfig: Partial<RequestConfig>): void {\n        this.config = deepMerge(this.config, customConfig);\n    }\n\n    /**\n     * 主要请求部分\n     * @param options 请求参数\n     */\n    request<T = unknown>(options: RequestOptions): Promise<T> {\n        // 合并 meta 配置，优先级：单次请求 > 全局\n        const mergedMeta: RequestMeta = {\n            ...this.config.meta,\n            ...(options.meta || {})\n        };\n        // 让 options.meta 传递到拦截器\n        options.meta = mergedMeta;\n\n        if (this.interceptor.request && typeof this.interceptor.request === 'function') {\n            const interceptorRequest = this.interceptor.request(options);\n            if (interceptorRequest === false) {\n                // 返回一个处于pending状态中的Promise，来取消原promise，避免进入then()回调\n                return new Promise(() => {});\n            }\n            this.options = interceptorRequest;\n        }\n        options.dataType = options.dataType || this.config.dataType;\n        options.responseType = options.responseType || this.config.responseType;\n        options.url = options.url || '';\n        options.params = options.params || {};\n        options.header = Object.assign({}, this.config.header, options.header);\n        options.method = (options.method || this.config.method) as RequestOptions['method'];\n        // 保证 url 一定为 string\n        if (!options.url) options.url = '';\n\n        return new Promise<T>((resolve, reject) => {\n            options.complete = (response: any) => {\n                // 读取 meta 配置\n                const meta = options.meta || this.config.meta || {};\n                const originalData = meta.originalData ?? false;\n                // 拦截器处理，加入request的配置参数\n                response.config = options;\n                if (originalData) {\n                    // 判断是否存在拦截器\n                    if (this.interceptor.response && typeof this.interceptor.response === 'function') {\n                        const resInterceptors = this.interceptor.response(response);\n                        // 如果拦截器不返回false，就将拦截器返回的内容给请求的then回调\n                        if (resInterceptors !== false) {\n                            resolve(resInterceptors);\n                        } else {\n                            // 如果拦截器返回false，意味着拦截器定义者认为返回有问题，直接接入catch回调\n                            reject(response);\n                        }\n                    } else {\n                        // 如果要求返回原始数据，就算没有拦截器，也返回最原始的数据\n                        resolve(response);\n                    }\n                } else {\n                    if (response.statusCode === 200) {\n                        if (this.interceptor.response && typeof this.interceptor.response === 'function') {\n                            const resInterceptors = this.interceptor.response(response.data);\n                            if (resInterceptors !== false) {\n                                resolve(resInterceptors);\n                            } else {\n                                reject(response.data);\n                            }\n                        } else {\n                            // 如果不是返回原始数据(originalData=false)，且没有拦截器的情况下，返回纯数据给then回调\n                            resolve(response.data);\n                        }\n                    } else {\n                        reject(response);\n                    }\n                }\n            };\n            // 判断用户传递的URL是否http开头\n            options.url = options.url && options.url.indexOf('http') !== 0 ? this.config.baseUrl + (options.url.indexOf('/') === 0 ? options.url : `/${options.url}`) : options.url;\n            uni.request(options);\n        });\n    }\n\n    get<T = unknown>(url: string, data: any = {}, options: { header?: Record<string, any>; meta?: RequestMeta } = {}): Promise<T> {\n        return this.request<T>({\n            method: 'GET',\n            url,\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n\n    post<T = unknown>(url: string, data: any = {}, options: { header?: Record<string, any>; meta?: RequestMeta } = {}): Promise<T> {\n        return this.request<T>({\n            url,\n            method: 'POST',\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n\n    put<T = unknown>(url: string, data: any = {}, options: { header?: Record<string, any>; meta?: RequestMeta } = {}): Promise<T> {\n        return this.request<T>({\n            url,\n            method: 'PUT',\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n\n    delete<T = unknown>(url: string, data: any = {}, options: { header?: Record<string, any>; meta?: RequestMeta } = {}): Promise<T> {\n        return this.request<T>({\n            url,\n            method: 'DELETE',\n            data,\n            header: options.header,\n            meta: options.meta\n        });\n    }\n}\n\n// 插件化导出，支持 app.use(http, { interceptor })\nconst httpInstance = new Request();\n\ninterface HttpPluginOptions {\n    requestConfig?: Partial<RequestConfig>;\n    interceptor?: RequestInterceptor;\n}\n\n// 全局导出，支持 import { httpPlugin } from 'uview-pro'\nconst httpPlugin = {\n    install(app: any, options: HttpPluginOptions = {}) {\n        if (options.interceptor) {\n            const { request, response } = options.interceptor;\n            if (request) httpInstance.interceptor.request = request;\n            if (response) httpInstance.interceptor.response = response;\n        }\n        if (options.requestConfig) {\n            httpInstance.setConfig(options.requestConfig);\n        }\n        app.config.globalProperties.$http = httpInstance;\n    }\n};\n\n// 全局导出，支持 import { http } from 'uview-pro'\nexport { httpInstance as http };\n\n// 插件化导出，支持 app.use(http, { interceptor })\nexport default httpPlugin;\n", "// post类型对象参数转为get类型url参数\nimport queryParams from './libs/function/queryParams';\n// 路由封装\nimport route from './libs/function/route';\n// 时间格式化\nimport timeFormat from './libs/function/timeFormat';\n// 时间戳格式化,返回多久之前\nimport timeFrom from './libs/function/timeFrom';\n// 颜色渐变相关,colorGradient-颜色渐变,hexToRgb-十六进制颜色转rgb颜色,rgbToHex-rgb转十六进制\nimport colorGradients from './libs/function/colorGradient';\n// 生成全局唯一guid字符串\nimport guid from './libs/function/guid';\n// 主题相关颜色,info|success|warning|primary|default|error,此颜色已在uview.scss中定义,但是为js中也能使用,故也定义一份\nimport color from './libs/function/color';\n// 根据type获取图标名称\nimport type2icon from './libs/function/type2icon';\n// 打乱数组的顺序\nimport randomArray from './libs/function/randomArray';\n// 对象和数组的深度克隆\nimport deepClone from './libs/function/deepClone';\n// 对象深度拷贝\nimport deepMerge from './libs/function/deepMerge';\n// 添加单位\nimport addUnit from './libs/function/addUnit';\n// 规则检验\nimport test from './libs/function/test';\n// 随机数\nimport random from './libs/function/random';\n// 去除空格\nimport trim from './libs/function/trim';\n// toast提示，对uni.showToast的封装\nimport toast from './libs/function/toast';\n// 获取父组件参数\nimport getParent from './libs/function/getParent';\n// 获取整个父组件\nimport $parent from './libs/function/$parent';\n// 获取sys()和os()工具方法\n// 获取设备信息，挂载到$u的sys()(system的缩写)属性中，\n// 同时把安卓和ios平台的名称\"ios\"和\"android\"挂到$u.os()中，方便取用\nimport { sys, os } from './libs/function/sys';\n// 防抖方法\nimport debounce from './libs/function/debounce';\n// 节流方法\nimport throttle from './libs/function/throttle';\n// 获取元素的位置信息\nimport getRect from './libs/function/getRect';\n// 获取父组件\nimport { parentData, parent } from './libs/function/parent';\n\n// 配置信息\nimport config from './libs/config/config';\n// 各个需要fixed的地方的z-index配置文件\nimport zIndex from './libs/config/zIndex';\nimport { dispatch, broadcast } from './libs/util/emitter';\nimport { mitt } from './libs/util/mitt';\n// http相关\nimport httpPlugin, { Request, http, type RequestOptions, type RequestConfig, type RequestInterceptor, type RequestMeta } from './libs/request/index';\n\ndeclare const uni: {\n    [key: string]: any;\n    $u?: typeof $u;\n    createSelectorQuery: () => any;\n    hideLoading: () => void;\n    showLoading: (options: any) => void;\n    request: (options: RequestOptions) => any;\n};\n\n/**\n * $u 工具库类型声明\n */\nexport interface UViewUtils {\n    queryParams: typeof queryParams;\n    route: typeof route;\n    timeFormat: typeof timeFormat;\n    date: typeof timeFormat;\n    timeFrom: typeof timeFrom;\n    colorGradient: typeof colorGradients.colorGradient;\n    colorToRgba: typeof colorGradients.colorToRgba;\n    guid: typeof guid;\n    color: typeof color;\n    sys: typeof sys;\n    os: typeof os;\n    type2icon: typeof type2icon;\n    randomArray: typeof randomArray;\n    dispatch: typeof dispatch;\n    broadcast: typeof broadcast;\n    hexToRgb: typeof colorGradients.hexToRgb;\n    rgbToHex: typeof colorGradients.rgbToHex;\n    test: typeof test;\n    random: typeof random;\n    deepClone: typeof deepClone;\n    deepMerge: typeof deepMerge;\n    getParent: typeof getParent;\n    $parent: typeof $parent;\n    parent: typeof parent;\n    parentData: typeof parentData;\n    addUnit: typeof addUnit;\n    trim: typeof trim;\n    type: string[];\n    http: typeof http;\n    toast: typeof toast;\n    config: typeof config;\n    zIndex: typeof zIndex;\n    debounce: typeof debounce;\n    throttle: typeof throttle;\n    mitt: ReturnType<typeof mitt>;\n    getRect: typeof getRect;\n}\n\nexport const $u: UViewUtils = {\n    queryParams: queryParams,\n    route: route,\n    timeFormat: timeFormat,\n    date: timeFormat, // 另名date\n    timeFrom,\n    colorGradient: colorGradients.colorGradient,\n    colorToRgba: colorGradients.colorToRgba,\n    guid,\n    color,\n    sys,\n    os,\n    type2icon,\n    randomArray,\n    dispatch,\n    broadcast,\n    hexToRgb: colorGradients.hexToRgb,\n    rgbToHex: colorGradients.rgbToHex,\n    test,\n    random,\n    deepClone,\n    deepMerge,\n    getParent,\n    $parent,\n    parent,\n    parentData,\n    addUnit,\n    trim,\n    type: ['primary', 'success', 'error', 'warning', 'info'],\n    http,\n    toast,\n    config, // uView配置信息相关，比如版本号\n    zIndex,\n    debounce,\n    throttle,\n    mitt: mitt(),\n    getRect\n};\n\n// $u挂载到uni对象上\n\nconst install = (): void => {\n    uni.$u = $u;\n};\n\nexport default {\n    install\n};\n\n// 工具方法单独导出，支持 import { deepClone } from 'uview-pro'\nexport {\n    queryParams,\n    route,\n    timeFormat,\n    timeFrom,\n    guid,\n    color,\n    sys,\n    os,\n    type2icon,\n    randomArray,\n    deepClone,\n    deepMerge,\n    addUnit,\n    test,\n    random,\n    trim,\n    toast,\n    debounce,\n    throttle,\n    getRect,\n    getParent,\n    $parent,\n    parent,\n    parentData,\n    dispatch,\n    broadcast,\n    config,\n    zIndex\n};\n\n// 颜色相关方法单独导出\nexport const { colorGradient, colorToRgba, hexToRgb, rgbToHex } = colorGradients;\n\n// http相关导出\nexport { Request, httpPlugin, http, type RequestOptions, type RequestConfig, type RequestInterceptor, type RequestMeta };\n"],
  "mappings": "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",
  "names": ["url", "config", "date", "timer", "color", "array", "parent", "parent", "getCurrentInstance", "getCurrentInstance", "parent", "getCurrentInstance", "parent", "_a", "url", "colorGradient", "colorToRgba", "hexToRgb", "rgbToHex"]
}
